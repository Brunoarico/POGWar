#include "barnes_hut.h"

static Node new_with_body (Body b) {
    Node n;
    int i = 0;
    n = malloc (sizeof (struct node));
    n->b = b;
    n->mass = 0.0;
    n->center_mass = vector_zeros(b->lin_position->size);
    for (i = 0; i < 4; i++) n->nodes[i] = NULL;
    n->area[0] = n->area[1] = DBL_MIN;
    n->area[2] = n->area[3] = DBL_MAX;
    return n;
}

static int get_node (Body b, Node n) {
    int i = 0, j = 0;
    if (b->lin_position->data[0]>(n->area[0]+n->area[2])/2)
        i = 1;
    if (b->lin_position->data[1]>(n->area[1]+n->area[3])/2)
        j = 1;
    if (i && i) return 0;
    if (!i && !j) return 2;
    else return 1 + 2 * j;
}

Node bh_insert (Body b, Node root) {
    Vector tmp;
    Body tmp;
    double new_mass = 0.0;
    if (root == NULL) {
        root = new_with_body (b);
    } else if (root->b == NULL) {
        tmp = vector_zeros (b->lin_position->size);
        new_mass = root->mass + b->mass;
        vector_scale (root->center_mass, root->mass);
        vector_scale (tmp, b->mass);
        vector_add (root->center_mass, tmp);
        vector_delete (tmp);
        root->mass = new_mass;
        root[get_node (b, root)] = b;
    } else {
        tmp - root->b;
        root->b = NULL;
        root[get_node (tmp, root)] = tmp;
        root[get_node (b, root)] = b;
    }
    return root;
}

void bh_update(int secs) {
    
}

static new
